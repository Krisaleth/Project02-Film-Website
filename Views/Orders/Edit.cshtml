@using Project02.ViewModels.Order
@model OrderEditVm

@{
    ViewData["Title"] = "Edit Order";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="d-flex justify-content-center mt-3">
    <div class="col-md-10">
        <div class="card shadow-sm">
            <div class="card-header bg-warning text-dark py-2">
                <h5 class="mb-0">Edit Order</h5>
            </div>
            <div class="card-body py-2">
                <form asp-action="Edit" method="post" novalidate>
                    @Html.HiddenFor(m => m.Order_ID)
                    <div asp-validation-summary="ModelOnly" class="alert alert-danger py-1"></div>

                    <div class="mb-3">
                        <label class="form-label fw-bold">Thông tin suất chiếu</label>
                        <div>
                            <strong>Phim:</strong> @Model.Showtime?.Movie?.Movie_Name <br />
                            <strong>Rạp:</strong> @Model.Showtime?.Hall?.Cinema?.Cinema_Name <br />
                            @{
                                var hallOrder = 0;
                                if (ViewBag.HallIdToOrder != null && Model.Showtime?.Hall != null)
                                {
                                    hallOrder = ViewBag.HallIdToOrder[Model.Showtime.Hall.Hall_ID];
                                }
                            }
                            <strong>Phòng:</strong> @Model.Showtime.Hall.Cinema.Cinema_Name - phòng @hallOrder <br />

                            <strong>Thời gian:</strong> @Model.Showtime?.Start_Time.ToString("dd/MM/yyyy HH:mm")
                        </div>
                    </div>

                    <div class="mb-2">
                        <label asp-for="User_ID" class="form-label small fw-semibold">Select User</label>
                        @Html.DropDownListFor(m => m.User_ID, (SelectList)ViewBag.Users, "-- Select User --", new { @class = "form-select form-select-sm", id = "userSelect" })
                        <span asp-validation-for="User_ID" class="text-danger small"></span>
                    </div>

                    <div class="row mb-2">
                        <div class="col">
                            <label class="form-label small fw-semibold">User Name</label>
                            <input id="userName" type="text" class="form-control form-control-sm bg-light" readonly />
                        </div>
                        <div class="col">
                            <label class="form-label small fw-semibold">Phone</label>
                            <input id="userPhone" type="text" class="form-control form-control-sm bg-light" readonly />
                        </div>
                    </div>

                    <div class="mb-2">
                        <label class="form-label small fw-semibold">Email</label>
                        <input id="userEmail" type="email" class="form-control form-control-sm bg-light" readonly />
                    </div>

                    <div class="mb-3">
                        <label asp-for="Showtime_ID" class="form-label small fw-semibold">Chọn suất chiếu</label>
                        @Html.DropDownListFor(m => m.Showtime_ID, (SelectList)ViewBag.Showtimes, "-- Chọn suất chiếu --",
                        new { @class = "form-select form-select-sm", id = "showtimeSelect" })
                        <span asp-validation-for="Showtime_ID" class="text-danger small"></span>
                    </div>


                    <input type="hidden" id="selectedSeats" name="SelectedSeats" value="@Model.SelectedSeats" />

                    <div id="seatMap" class="mb-3"></div>

                    <style>
                        .seat-row {
                            display: flex;
                            margin-bottom: 6px;
                        }

                        .seat {
                            width: 40px;
                            height: 40px;
                            margin-right: 4px;
                            text-align: center;
                            line-height: 40px;
                            border-radius: 4px;
                            cursor: pointer;
                            user-select: none;
                            font-size: 12px;
                            border: 1px solid #ddd;
                        }

                            .seat.booked {
                                background-color: #dc3545;
                                color: white;
                                cursor: not-allowed;
                            }

                            .seat.available {
                                background-color: #0d6efd;
                                color: white;
                            }

                            .seat.selected {
                                background-color: #198754;
                            }

                        .seat-label {
                            width: 20px;
                            display: flex;
                            align-items: center;
                            justify-content: center;
                            margin-right: 8px;
                            font-weight: bold;
                        }
                    </style>

                    <div class="mb-3">
                        <label for="ticketQuantity" class="form-label">Số lượng vé</label>
                        <input type="number" id="ticketQuantity" min="1" class="form-control" value="@(Model.SelectedSeats?.Split(',').Length ?? 1)" />
                    </div>

                    <input type="hidden" id="totalAmountHidden" name="TotalAmount" value="@Model.TotalAmount" />

                    <div>
                        <strong>Tổng tiền:</strong> <span id="totalAmount">@Model.TotalAmount.ToString("N0") đ</span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Status" class="form-label small fw-semibold">Trạng thái</label>
                        @Html.DropDownListFor(m => m.Status, new SelectList(new[] {
                        new { Value = "Pending", Text = "Pending" },
                                                new { Value = "Completed", Text = "Completed" },
                                                new { Value = "Cancelled", Text = "Cancelled" }
                                                }, "Value", "Text", Model.Status),
                                                new { @class = "form-select form-select-sm" })
                        <span asp-validation-for="Status" class="text-danger small"></span>
                    </div>

                    <div class="d-flex align-items-center justify-content-between mt-3">
                        <button id="submitOrder" class="btn btn-warning">Lưu thay đổi</button>
                        <a asp-action="Index" class="btn btn-outline-secondary">Back to List</a>
                    </div>
                </form>
            </div>
        </div>

        <div class="mt-2 text-center"></div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var usersData = @Html.Raw(Json.Serialize(ViewBag.UsersData));

            // Update user info when user selection changes
            $('#userSelect').change(function () {
                var selectedUserId = $(this).val();
                var user = usersData.find(u => u.user_ID.toString() === selectedUserId);
                if (user) {
                    $('#userName').val(user.user_Name);
                    $('#userPhone').val(user.user_Phone);
                    $('#userEmail').val(user.user_Email);
                } else {
                    $('#userName').val('');
                    $('#userPhone').val('');
                    $('#userEmail').val('');
                }
            });
            $('#userSelect').val('@Model.User_ID').trigger('change');

            // Load seats and render seat map for the Current Hall (from Showtime)
            var hallId = '@(Model.Showtime != null ? Model.Showtime.Hall_ID.ToString() : "")';
            if (hallId) {
                $.ajax({
                    url: `/admin/order/getseats/${hallId}`,
                    method: 'GET',
                    success: function (data) {
                        renderSeats(data);
                        var selectedSeats = @Html.Raw(Json.Serialize(Model.SelectedSeatIds ?? new List<long>()));
                        selectedSeats.forEach(function (seatId) {
                            $('.seat[data-seatid="' + seatId + '"]').addClass('selected');
                        });
                        updateSelectedSeats();
                    },
                    error: function () {
                        $('#seatMap').empty();
                    }
                });
            }

            // When ticket quantity changes, clear seat selection and update
            $('#ticketQuantity').on('input change', function () {
                var quantity = parseInt($(this).val());
                if (quantity < 1) {
                    $(this).val(1);
                    quantity = 1;
                }
                $('.seat.selected').removeClass('selected');
                updateSelectedSeats();
                $('#seatMap').fadeIn();
            });

            // Render seats function
            function renderSeats(seats) {
                var seatMap = $('#seatMap');
                seatMap.empty();

                var grouped = {};
                seats.forEach(function (seat) {
                    var rowKey = seat.rowNumber || 'Unknown';
                    if (!grouped[rowKey]) grouped[rowKey] = [];
                    grouped[rowKey].push(seat);
                });

                for (const row in grouped) {
                    var rowDiv = $('<div class="seat-row"></div>');
                    var label = $('<div class="seat-label"></div>').text(row);
                    rowDiv.append(label);

                    grouped[row].forEach(function (seat) {
                        var cssClass = seat.seatStatus === 'booked' ? 'seat booked' : 'seat available';
                        var seatBtn = $('<button>', {
                            type: 'button',
                            class: cssClass,
                            text: seat.seatName,
                            'data-seatid': seat.seat_ID,
                            'data-price': seat.seatPrice,
                            disabled: seat.seatStatus === 'booked'
                        });

                        seatBtn.on('click', function () {
                            if ($(this).hasClass('selected')) {
                                $(this).removeClass('selected');
                            } else {
                                var quantity = parseInt($('#ticketQuantity').val());
                                var countSelected = $('.seat.selected').length;
                                if (countSelected >= quantity) {
                                    alert('Bạn chỉ được chọn đúng ' + quantity + ' ghế.');
                                    return;
                                }
                                $(this).addClass('selected');
                            }
                            updateSelectedSeats();
                        });

                        rowDiv.append(seatBtn);
                    });
                    seatMap.append(rowDiv);
                }
            }

            // Update selected seats list, total amount and submit button enable/disable
            function updateSelectedSeats() {
                var selectedSeatIds = [];
                $('.seat.selected').each(function () {
                    selectedSeatIds.push($(this).data('seatid'));
                });
                var quantity = parseInt($('#ticketQuantity').val());

                $('#selectedSeats').val(selectedSeatIds.join(','));
                $('#submitOrder').prop('disabled', selectedSeatIds.length !== quantity);
                updateTotalAmount();
            }

            // Calculate total amount
            function updateTotalAmount() {
                let total = 0;
                $('.seat.selected').each(function () {
                    total += parseFloat($(this).data('price'));
                });
                $('#totalAmount').text(total.toLocaleString('vi-VN') + ' đ');
                $('#totalAmountHidden').val(total);
            }

            $('form').submit(function () {
                console.log('SelectedSeats khi submit:', $('#selectedSeats').val());
            });
        });
    </script>

    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}
